{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MathTask","props","check","value","inputRef","sum","answer","n","Math","floor","row","h","push","sumBefore2","remnant","y","j","g","length","z","setState","state","this","listItems","map","key","children","console","log","type","ref","el","onClick","id","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAOMA,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,MAAO,WAIH,IAHA,IAAIC,EAAQ,EAAKC,SAASD,MACtBE,EAAM,EACNC,EAAS,GACJC,EAAI,EAAGA,GAAKC,KAAKC,MAAMN,EAAQ,GAAII,IAAK,CAC7CF,EAAM,EAEN,IADA,IAAIK,EAAM,GACDC,EAAI,EAAGA,EAAIJ,EAAGI,IACnBN,GAAO,EACPK,EAAIE,KAAK,GAIb,IAFA,IAAIC,EAAaR,EACbS,EAAUX,EAAQE,EACbU,EAAI,EAAGA,GAAKP,KAAKC,MAAMK,EAAU,GAAIC,IAAK,CAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGC,IACnBX,GAAO,EACPK,EAAIE,KAAK,GAEb,IAAK,IAAIK,EAAI,EAAGZ,EAAMF,EAAOc,IACzBZ,GAAO,EACPK,EAAIE,KAAK,GAEb,GAAIE,GAAWJ,EAAIQ,OAAQ,CACvBZ,EAAOM,KAAKF,GACZA,EAAM,GACN,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAAa,EAAIM,IACjCT,EAAIE,KAAK,GAEbP,EAAMQ,IAGTC,GAAWJ,EAAIQ,SAChBZ,EAAOM,KAAKF,GACZA,EAAM,GACNL,EAAM,GAKd,EAAKe,SAAS,CAAEd,YA5ChB,EAAKe,MAAQ,CACTf,OAAQ,IAHG,E,0CAiDnB,WAAU,IAAD,OACGA,EAAWgB,KAAKD,MAAhBf,OACFiB,EAAYjB,EAAOkB,KAAI,SAACd,EAAKe,GAAN,OAEzB,aADA,CACA,OAAeC,SAAUhB,GAAfe,MAGd,OADAE,QAAQC,IAAIL,GAER,gCACI,sKACA,uBACIM,KAAK,SACLC,IAAK,SAAAC,GAAE,OAAI,EAAK3B,SAAW2B,KAE/B,kMACA,mWACA,wBAAQC,QAASV,KAAKpB,MAAtB,oEAGA,qBAAKwB,SAAQ,yJAAiCpB,EAAOY,QAAU,KAC9DK,EACD,qBAAKU,GAAG,kB,GAxEDC,aA8ERC,EAlFf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d5bd3f4f.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport './App.css';\n\nfunction App() {\n  return <MathTask/>\n}\n\nclass MathTask extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            answer: []\n        };\n    }\n\n    check =() => {\n        let value = this.inputRef.value;\n        let sum = 0;\n        let answer = [];\n        for (let n = 0; n <= Math.floor(value / 5); n++) {\n            sum = 0;\n            let row = [];\n            for (let h = 0; h < n; h++) {\n                sum += 5;\n                row.push(5);\n            }\n            let sumBefore2 = sum;\n            let remnant = value - sum;\n            for (let y = 0; y <= Math.floor(remnant / 2); y++) {\n                for (let j = 0; j < y; j++) {\n                    sum += 2;\n                    row.push(2);\n                }\n                for (let g = 0; sum < value; g++) {\n                    sum += 1;\n                    row.push(1);\n                }\n                if (remnant && row.length) {\n                    answer.push(row);\n                    row = [];\n                    for (let z = 0; z < sumBefore2 / 5 ; z++) {\n                        row.push(5);\n                    }\n                    sum = sumBefore2;\n                }\n            }\n            if (!remnant && row.length) {\n                answer.push(row);\n                row = [];\n                sum = 0;\n\n            }\n        }\n\n        this.setState({ answer });\n    }\n\n    render() {\n        const { answer } = this.state;\n        const listItems = answer.map((row, key) =>\n            // Неправильно! Ключ необходимо определить здесь:\n            <div key={key} children={row}/>\n        );\n        console.log(listItems)\n        return(\n            <div>\n                <span>У вас есть бочка емкостью</span>\n                <input\n                    type=\"number\"\n                    ref={el => this.inputRef = el}\n                />\n                <span>Л. и бутылки емкостью 1, 2 и 5 литров.</span>\n                <div>Вам нужно высчитать все возможные варианты заполнения бочки.</div>\n                <button onClick={this.check}>\n                    высчитать\n                </button>\n                <div children={`у вас получилось вариантов: ${answer.length || 0}`}/>\n                {listItems}\n                <div id=\"answer\"/>\n            </div>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}